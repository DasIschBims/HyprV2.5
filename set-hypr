#!/bin/bash

# The follwoing will attempt to install all needed packages to run Hyprland
# This is a quick and dirty script there are no error checking
# This script is meant to run on a clean fresh Arch install
#
# Below is a list of the packages that would be installed
#
# hyprland: This is the Hyprland compositor
# hyprpaper-git: This is a wallpaper manager for Hyprland
# alacritty: This is my terminal emulator of choice
# waybar-hyprland: This is a fork of waybar with Hyprland workspace support
# swww: This is used to set a desktop background image
# swaylock-effects: This allows for the locking of the desktop its a fork that adds some editional visual effects
# wofi: This is an application launcher menu
# wlogout: This is a logout menu that allows for shutdown, reboot and sleep
# mako: This is a graphical notification daemon
# xdg-desktop-portal-hyprland-git: xdg-desktop-portal backend for hyprland
# swappy: This is a screenshot editor tool
# grimshot: This is a screenshot tool
# slurp: This helps with screenshots, it selects a region in a Wayland compositor
# thunar: This is a graphical file manager
# polkit-gnome: needed to get superuser access on some graphical appliaction
# python-requests: needed for the weather module script to execute
# pamixer: This helps with audio settings such as volume
# pavucontrol: GUI for managing audio and audio devices
# network-manager-applet: Applet for managing network connection
# gvfs: adds missing functionality to thunar such as automount usb drives
# thunar-archive-plugin: Provides a front ent for thunar to work with compressed files
# file-roller: Backend set of tools for working with compressed files
# btop: Resource monitor that shows usage and stats for processor, memory, disks, network and processes.
# noto-fonts-emoji: fonts needed by the weather script in the top bar
# lxappearance: used to set GTK theme
# xfce4-settings: set of tools for xfce, needed to set GTK theme
# sddm-git: developement version of SDDM which is a display manager for graphical login
# sddm-sugar-candy-git: an sddm theme
# ttf-firacode-nerd: Nerd fonts for icons and overall look
# neofetch: This is a system information tool
# pfetch-git: I like pfetch better than neofetch (don't judge me)
# zsh: This is my shell of choice
# oh-my-zsh-git: This is a framework for zsh

# Hyprland fixes (Nvidia)
# nvidia-vaapi-driver-git
# libva-git
# qt5ct
# qt5-wayland

# set some colors
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
INSTLOG="install.log"

#clear the screen
clear

# set some expectations for the user
echo -e "$CNT - You are about to execute a script that would attempt to setup Hyprland.
Please note that Hyprland is still in Beta.
Please note that VMs are not fully supported and if you try to run this on
a Virtual Machine there is a high chance this will fail.
Please note that support for Nvidia GPUs is limited and may require
more work which is beyond the scope of this script.
\n"

sleep 3

read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to continue with the install (y,n) ' INST
if [[ $INST == "Y" || $INST == "y" ]]; then
    echo -e "$COK - Starting install script.."
else
    echo -e "$CNT - This script would now exit, no changes were made to your system."
    exit
fi


echo -e "\n
$CNT - This script will run some commands that require sudo. You will be prompted to enter your password.
If you are worried about entering your password then you may want to review the content of the script."

sleep 3

#### Check for yay ####
HASYAY=$(which yay)
if [ -f "$HASYAY" ]; then
    echo -e "$COK - yay was located, moving on."
else 
    echo -e "$CWR - Yay was NOT located"
    read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to install yay (y,n) ' INSTYAY
    if [[ $INSTYAY == "Y" || $INSTYAY == "y" ]]; then
        git clone https://aur.archlinux.org/yay-git.git &>> $INSTLOG
        cd yay-git || exit
        makepkg -si --noconfirm &>> ../$INSTLOG
        cd ..
        
    else
        echo -e "$CER - Yay is required for this script, now exiting"
        exit
    fi
fi

### Install all of the above packages ####
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the packages? (y,n) ' INST
if [[ $INST == "Y" || $INST == "y" ]]; then
    # update the DB first
    echo -e "$COK - Updating yay database..."
    yay -Suy --noconfirm &>> $INSTLOG
    
    #Stage 1
    echo -e "\n$CNT - Stage 1 - Installing main components, this may take a while..."
    for SOFTWR in hyprland hyprpaper-git alacritty waybar-hyprland swaylock-effects wofi wlogout mako xdg-desktop-portal-hyprland-git swappy grimshot slurp thunar
    do
        #First lets see if the package is there
        if yay -Qs $SOFTWR > /dev/null ; then
            echo -e "$COK - $SOFTWR is already installed."
        else
            echo -e "$CNT - Now installing $SOFTWR ..."
            yay -S --noconfirm $SOFTWR &>> $INSTLOG
            if yay -Qs $SOFTWR > /dev/null ; then
                echo -e "$COK - $SOFTWR was installed."
            else
                echo -e "$CER - $SOFTWR install had failed, please check the install.log"
                exit
            fi
        fi
    done

    #Stage 2
    echo -e "\n$CNT - Stage 2 - Installing additional tools and utilities, this may take a while..."
    for SOFTWR in polkit-gnome python-requests pamixer pavucontrol network-manager-applet gvfs thunar-archive-plugin file-roller btop neofetch pfetch-git
    do
        #First lets see if the package is there
        if yay -Qs $SOFTWR > /dev/null ; then
            echo -e "$COK - $SOFTWR is already installed."
        else
            echo -e "$CNT - Now installing $SOFTWR ..."
            yay -S --noconfirm $SOFTWR &>> $INSTLOG
            if yay -Qs $SOFTWR > /dev/null ; then
                echo -e "$COK - $SOFTWR was installed."
            else
                echo -e "$CER - $SOFTWR install had failed, please check the install.log"
                exit
            fi
        fi
    done

    #Stage 3
    echo -e "\n$CNT - Stage 3 - Installing theme and visual related tools and utilities, this may take a while..."
    for SOFTWR in ttf-firacode-nerd noto-fonts-emoji lxappearance xfce4-settings sddm-git sddm-sugar-candy-git
    do
        #First lets see if the package is there
        if yay -Qs $SOFTWR > /dev/null ; then
            echo -e "$COK - $SOFTWR is already installed."
        else
            echo -e "$CNT - Now installing $SOFTWR ..."
            yay -S --noconfirm $SOFTWR &>> $INSTLOG
            if yay -Qs $SOFTWR > /dev/null ; then
                echo -e "$COK - $SOFTWR was installed."
            else
                echo -e "$CER - $SOFTWR install had failed, please check the install.log"
                exit
            fi
        fi
    done

    # Start the bluetooth service
    echo -e "$CNT - Starting the Bluetooth Service..."
    sudo systemctl enable --now bluetooth.service &>> $INSTLOG
    sleep 2

    # Enable the sddm login manager service
    echo -e "$CNT - Enabling the SDDM Service..."
    sudo systemctl enable sddm &>> $INSTLOG
    sleep 2
    
    # Clean out other portals
    echo -e "$CNT - Cleaning out conflicting xdg portals..."
    yay -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk &>> $INSTLOG
fi

### Copy Config Files ###
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to copy config.jsonc files? (y,n) ' CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
    echo -e "$CNT - Copying config files..."
    for DIR in .config.jsonc/*
    do 
        DIRPATH=~/.config.jsonc/$DIR
        if [ -d "$DIRPATH" ]; then 
            echo -e "$CAT - Config for $DIR located, backing up."
            mv "$DIRPATH" "$DIRPATH"-backup &>> $INSTLOG
            echo -e "$COK - Backed up $DIR to $DIRPATH-backup."
        fi
        echo -e "$CNT - Copying $DIR config to $DIRPATH."  
        cp -R "$DIR" ~/.config.jsonc/ &>> $INSTLOG
    done

    # Set some files as executable
    echo -e "$CNT - Setting some file as executable."
    chmod +x ~/.config.jsonc/hypr/scripts/xdg-portal-hyprland
    chmod +x ~/.config.jsonc/waybar/scripts/waybar-wttr.py
    chmod +x ~/.config.jsonc/waybar/scripts/baraction
    chmod +x ~/.config.jsonc/waybar/scripts/update-sys

    # Copy the SDDM theme
    echo -e "$CNT - Setting up the login screen."
    sudo mkdir /etc/sddm.conf.d
    echo -e "[Theme]\nCurrent=sugar-candy" | sudo tee -a /etc/sddm.conf.d/10-theme.conf &>> $INSTLOG

    WLDIR=/usr/share/wayland-sessions
    if [ -d "$WLDIR" ]; then
        echo -e "$COK - $WLDIR found"
    else
        echo -e "$CWR - $WLDIR NOT found, creating..."
        sudo mkdir $WLDIR
    fi

    # Dark mode
    xfconf-query -c xsettings -p /Net/ThemeName -s "Adwaita-dark"
    xfconf-query -c xsettings -p /Net/IconThemeName -s "Adwaita-dark"
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
    gsettings set org.gnome.desktop.interface icon-theme "Adwaita-dark"
    ln -sf ~/.config.jsonc/hypr/wallpaper.jpg /usr/share/sddm/themes/sugar-candy/Background.jpg
fi

### Setup XDG dirs ###

# XDG_DESKTOP_DIR="$HOME/Desktop"
# XDG_DOWNLOAD_DIR="$HOME/Downloads"
# XDG_TEMPLATES_DIR="$HOME/Templates"
# XDG_PUBLICSHARE_DIR="$HOME/Public"
# XDG_DOCUMENTS_DIR="$HOME/Documents"
# XDG_MUSIC_DIR="$HOME/Music"
# XDG_PICTURES_DIR="$HOME/Pictures"
# XDG_SCREENSHOTS_DIR="$HOME/Pictures/Screenshots"
# XDG_VIDEOS_DIR="$HOME/Videos"

read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to setup XDG dirs? (y,n) ' XDG
if [[ $XDG == "Y" || $XDG == "y" ]]; then
    echo -e "$CNT - Setting up XDG dirs..."
    {
        echo "XDG_DESKTOP_DIR=\"$HOME/Desktop\""
        echo "XDG_DOWNLOAD_DIR=\"$HOME/Downloads\""
        echo "XDG_TEMPLATES_DIR=\"$HOME/Templates\""
        echo "XDG_PUBLICSHARE_DIR=\"$HOME/Public\""
        echo "XDG_DOCUMENTS_DIR=\"$HOME/Documents\""
        echo "XDG_MUSIC_DIR=\"$HOME/Music\""
        echo "XDG_PICTURES_DIR=\"$HOME/Pictures\""
        echo "XDG_SCREENSHOTS_DIR=\"$HOME/Pictures/Screenshots\""
        echo "XDG_VIDEOS_DIR=\"$HOME/Videos\""
    } >> ~/.config.jsonc/user-dirs.dirs

    echo -e "$CNT - Finished setting up XDG dirs."
fi

### Install the zsh shell ###
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the zsh shell? (y,n) ' ZSH
if [[ $ZSH == "Y" || $ZSH == "y" ]]; then
  # Install zsh
  echo -e "$CNT - Installing zsh..."
  yay -S --noconfirm zsh &>> $INSTLOG
  # Install oh-my-zsh
  echo -e "$CNT - Installing oh-my-zsh..."
  yay -S --noconfirm oh-my-zsh-git &>> $INSTLOG

  echo -e "$COK - Zsh is now installed."
fi

### Script is done ###
echo -e "$CNT - Script had completed!"
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to start Hyprland now? (y,n) ' HYP
if [[ $HYP == "Y" || $HYP == "y" ]]; then
    exec sudo systemctl start sddm &>> $INSTLOG
else
    exit
fi
